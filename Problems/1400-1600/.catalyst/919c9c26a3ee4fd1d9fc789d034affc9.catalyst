{"title":{"en":"D. Make Them Equal","ru":"D. Сделай равными"},"contestId":"1633","problemIndex":"D","timeLimit":{"en":"2 seconds","ru":"2 секунды"},"memLimit":{"en":"256 megabytes","ru":"256 мегабайт"},"inputFormat":{"en":"standard input","ru":"стандартный ввод"},"outputFormat":{"en":"standard output","ru":"стандартный вывод"},"problemHtml":{"en":"<p>You have an array of integers $$$a$$$ of size $$$n$$$. Initially, all elements of the array are equal to $$$1$$$. You can perform the following operation: choose two integers $$$i$$$ ($$$1 \\le i \\le n$$$) and $$$x$$$ ($$$x &gt; 0$$$), and then increase the value of $$$a_i$$$ by $$$\\left\\lfloor\\frac{a_i}{x}\\right\\rfloor$$$ (i.e. make $$$a_i = a_i + \\left\\lfloor\\frac{a_i}{x}\\right\\rfloor$$$).</p><p>After performing all operations, you will receive $$$c_i$$$ coins for all such $$$i$$$ that $$$a_i = b_i$$$.</p><p>Your task is to determine the maximum number of coins that you can receive by performing no more than $$$k$$$ operations.</p>","ru":"<p>У вас есть массив целых чисел $$$a$$$ размера $$$n$$$. Изначально все элементы массива равны $$$1$$$. Вы можете выполнять операцию следующего вида: выбрать два целых числа $$$i$$$ ($$$1 \\le i \\le n$$$) и $$$x$$$ ($$$x &gt; 0$$$), а затем увеличить значение $$$a_i$$$ на $$$\\left\\lfloor\\frac{a_i}{x}\\right\\rfloor$$$ (т.е. сделать $$$a_i = a_i + \\left\\lfloor\\frac{a_i}{x}\\right\\rfloor$$$).</p><p>После выполнения всех операций вы получите $$$c_i$$$ монет для тех $$$i$$$, в которых $$$a_i = b_i$$$.</p><p>Ваша задача&nbsp;— определить максимальное количество монет, которое вы можете получить выполнив не более $$$k$$$ операций.</p>"},"inSpecsHtml":{"en":"<div class=\"section-title\">Input</div><p>The first line contains a single integer $$$t$$$ ($$$1 \\le t \\le 100$$$)&nbsp;— the number of test cases.</p><p>The first line of each test case contains two integers $$$n$$$ and $$$k$$$ ($$$1 \\le n \\le 10^3; 0 \\le k \\le 10^6$$$)&nbsp;— the size of the array and the maximum number of operations, respectively.</p><p>The second line contains $$$n$$$ integers $$$b_1, b_2, \\dots, b_n$$$ ($$$1 \\le b_i \\le 10^3$$$).</p><p>The third line contains $$$n$$$ integers $$$c_1, c_2, \\dots, c_n$$$ ($$$1 \\le c_i \\le 10^6$$$).</p><p>The sum of $$$n$$$ over all test cases does not exceed $$$10^3$$$.</p>","ru":"<div class=\"section-title\">Входные данные</div><p>Первая строка содержит одно целое число $$$t$$$ ($$$1 \\le t \\le 100$$$)&nbsp;— количество наборов входных данных.</p><p>Первая строка каждого набора содержит два целых числа $$$n$$$ и $$$k$$$ ($$$1 \\le n \\le 10^3; 0 \\le k \\le 10^6$$$)&nbsp;— размер массива и максимальное количество операций, соответственно.</p><p>Вторая строка содержит $$$n$$$ целых чисел $$$b_1, b_2, \\dots, b_n$$$ ($$$1 \\le b_i \\le 10^3$$$).</p><p>Третья строка содержит $$$n$$$ целых чисел $$$c_1, c_2, \\dots, c_n$$$ ($$$1 \\le c_i \\le 10^6$$$).</p><p>Сумма $$$n$$$ по всем наборам входных данных не превосходит $$$10^3$$$.</p>"},"outSpecsHtml":{"en":"<div class=\"section-title\">Output</div><p>For each test case, print one integer&nbsp;— the maximum number of coins that you can get by performing no more than $$$k$$$ operations.</p>","ru":"<div class=\"section-title\">Выходные данные</div><p>Для каждого набора входных данных выведите одно целое число&nbsp;— максимальное количество монет, которое вы можете получить выполнив не более $$$k$$$ операций.</p>"},"noteHtml":{"en":null,"ru":null},"sampleTestcases":[{"id":1651643564275,"input":"4\n4 4\n1 7 5 2\n2 6 5 2\n3 0\n3 5 2\n5 4 7\n5 9\n5 2 5 6 3\n5 9 1 9 7\n6 14\n11 4 6 2 8 16\n43 45 9 41 15 38\n","output":"9\n0\n30\n167\n","result":{"id":1651643564275,"stdout":"9\r\n0\r\n30\r\n167\r\n","stderr":"","exitcode":0,"signal":null,"time":50,"timeout":false}}],"submitUrl":"https://codeforces.com/problemset/submit","language":"c++","editorial":"<div><p>Let's calculate $$$d_i$$$&nbsp;— the minimum number of operations to get the number $$$i$$$ from $$$1$$$. To do this, it is enough to use BFS or dynamic programming. Edges in the graph (transitions in dynamic programming) have the form $$$\\left(i, i + \\left\\lfloor\\frac{i}{x}\\right\\rfloor\\right)$$$ for all $$$1 \\le x \\le i$$$.</p><p>Now the problem itself can be reduced to a knapsack problem: there are $$$n$$$ items, $$$i$$$-th item weighs $$$d_{b_i}$$$ and costs $$$c_i$$$, you have to find a set of items with the total weight of no more than $$$k$$$ of the maximum cost. This is a standard problem that can be solved in $$$O(nk)$$$, but it is too slow (although some participants passed all the tests with such a solution). However, we can notice that the values of $$$d_i$$$ should not grow too fast, namely, the maximum value of $$$d_i$$$ for $$$1 \\le i \\le 10^3$$$ does not exceed $$$12$$$. This means that the maximum possible weight is no more than $$$12n$$$, and we can limit $$$k$$$ to this number (i. e. make $$$k = \\min(k, 12n)$$$).</p></div>","langId":"50"}